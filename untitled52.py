# -*- coding: utf-8 -*-
"""Untitled52.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pu5sg6DTD85wV_WXgsXeegorJ_DSfoOv
"""

import threading
import time
import queue

class OrderBook:
    def __init__(self):
        self.buy_orders = []
        self.sell_orders = []

    def add_order(self, order_type, price, quantity):
        order = {"type": order_type, "price": price, "quantity": quantity}
        if order_type == "buy":
            self.buy_orders.append(order)
            self.buy_orders.sort(key=lambda x: -x["price"])  # Highest price first
        else:
            self.sell_orders.append(order)
            self.sell_orders.sort(key=lambda x: x["price"])  # Lowest price first
        self.match_orders()

    def match_orders(self):
        while self.buy_orders and self.sell_orders and self.buy_orders[0]["price"] >= self.sell_orders[0]["price"]:
            buy_order = self.buy_orders.pop(0)
            sell_order = self.sell_orders.pop(0)
            print(f"Matched Order: {buy_order} with {sell_order}")

# Simulated Transaction Processing
def process_transactions(order_book, order_queue):
    while True:
        if not order_queue.empty():
            order = order_queue.get()
            order_book.add_order(*order)
        time.sleep(0.01)

order_book = OrderBook()
order_queue = queue.Queue()

processor = threading.Thread(target=process_transactions, args=(order_book, order_queue))
processor.start()

# Add sample orders
order_queue.put(("buy", 100, 1))
order_queue.put(("sell", 99, 1))

time.sleep(2)

import numpy as np
from sklearn.ensemble import IsolationForest

# Simulated transaction data
transactions = np.array([
    [100, 1],  # (amount, frequency)
    [200, 2],
    [5000, 10],  # Fraudulent
    [50, 1]
])

# Train Isolation Forest for anomaly detection
model = IsolationForest(contamination=0.1)
model.fit(transactions)

def detect_fraud(transaction):
    result = model.predict([transaction])
    return "Fraudulent" if result[0] == -1 else "Legit"

# Test fraud detection
test_txn = [5000, 10]  # High-risk transaction
print(f"Transaction {test_txn} is {detect_fraud(test_txn)}")

import numpy as np
import tensorflow as tf
from tensorflow import keras

# Generate fake stock prices
np.random.seed(42)
prices = np.cumsum(np.random.randn(100)) + 100

# Prepare training data with correct shape
X_train = np.array([prices[i:i+5] for i in range(len(prices)-5)])
y_train = np.array([prices[i+5] for i in range(len(prices)-5)])

# Reshape to fit LSTM input (samples, timesteps, features)
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))

# Build a simple LSTM model
model = keras.Sequential([
    keras.layers.LSTM(10, activation="relu", input_shape=(5, 1)),  # Corrected shape
    keras.layers.Dense(1)
])

model.compile(optimizer="adam", loss="mse")
model.fit(X_train, y_train, epochs=10, verbose=1)  # Training

# Function to predict next price
def predict_next_price(last_5_prices):
    last_5_prices = np.array(last_5_prices).reshape((1, 5, 1))  # Reshape correctly
    return model.predict(last_5_prices)[0][0]

# Test prediction
print(f"Next predicted price: {predict_next_price(prices[-5:])}")

model.save("market_prediction_model.h5")

from google.colab import drive
drive.mount('/content/drive')

!cp market_prediction_model.h5 /content/drive/MyDrive/

